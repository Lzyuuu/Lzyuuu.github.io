<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lzyuuu.github.io</id>
    <title>Zhaoyu的博客</title>
    <updated>2020-07-23T15:04:08.541Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lzyuuu.github.io"/>
    <link rel="self" href="https://lzyuuu.github.io/atom.xml"/>
    <subtitle>猫狗鱼的幸福生活</subtitle>
    <logo>https://lzyuuu.github.io/images/avatar.png</logo>
    <icon>https://lzyuuu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Zhaoyu的博客</rights>
    <entry>
        <title type="html"><![CDATA[通俗易懂解释汉明码]]></title>
        <id>https://lzyuuu.github.io/post/tong-su-yi-dong-jie-shi-han-ming-ma/</id>
        <link href="https://lzyuuu.github.io/post/tong-su-yi-dong-jie-shi-han-ming-ma/">
        </link>
        <updated>2020-07-23T12:15:11.000Z</updated>
        <summary type="html"><![CDATA[<p>汉明码（Hamming Code），是在电信领域的一种线性调试码，以发明者理查德·卫斯里·汉明的名字命名。汉明码在传输的消息流中插入验证码，当计算机存储或移动数据时，可能会产生数据位错误，以侦测并更正单一比特错误。本文将尽可能使用通俗易懂的语言对汉明码进行解释和说明。另外，本文参考了<a href="https://blog.csdn.net/Yonggie/article/details/83186280" title="说人话，人话！！ 汉明码（海明码、hamming code）通俗易懂的解释，说人话！！！！">这篇文章</a>，非常感谢这位大神的解释和启发。</p>
]]></summary>
        <content type="html"><![CDATA[<p>汉明码（Hamming Code），是在电信领域的一种线性调试码，以发明者理查德·卫斯里·汉明的名字命名。汉明码在传输的消息流中插入验证码，当计算机存储或移动数据时，可能会产生数据位错误，以侦测并更正单一比特错误。本文将尽可能使用通俗易懂的语言对汉明码进行解释和说明。另外，本文参考了<a href="https://blog.csdn.net/Yonggie/article/details/83186280" title="说人话，人话！！ 汉明码（海明码、hamming code）通俗易懂的解释，说人话！！！！">这篇文章</a>，非常感谢这位大神的解释和启发。</p>
<!-- more -->
<h2 id="前言">前言</h2>
<p>为了方便对文中的某些概念有更加深刻的理解，在解释汉明码的编码规则之前，请允许我先简单解释一下奇偶校验码这一概念，这里引入了百度百科关于奇偶校验码的描述。</p>
<blockquote>
<p>奇偶校验码是一种增加二进制传输系统最小距离的简单和广泛采用的方法。是一种通过增加冗余位使得码字中&quot;1&quot;的个数恒为奇数或偶数的编码方法，它是一种检错码。</p>
</blockquote>
<p>由上述描述，我们可以知道，奇偶校验码在原信息位上额外增加了一位奇偶校验位，从而使编码中1的个数恒定为奇数或偶数，当产生奇数位错误时，码字的奇偶校验性将会发生改变，因此我们就能检查出码字出现错误。但这种编码方式仅能发现奇数位错误，同时无法进行纠错。</p>
<h2 id="纠错原理">纠错原理</h2>
<p>首先，我们需要知道汉明码的核心思想是假设数据仅错一位。那么假设现在有一个七位的数据需要传输，那么我们可以先把这七位数据进行分组，具体分组如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://lzyuuu.github.io/post-images/1595509963316.jpg" alt="img" width="300" height="300" loading="lazy"></figure>
<table>
<thead>
<tr>
<th style="text-align:center">P1</th>
<th style="text-align:center">P2</th>
<th style="text-align:center">P3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">p1、d1、d2、d4</td>
<td style="text-align:center">p2、d1、d3、d4</td>
<td style="text-align:center">p3、d2、d3、d4</td>
</tr>
</tbody>
</table>
<p>因此对于p1、p2、p3、d1、d2、d3、d4来说，每个小块中都只对应一位数字，因此我们可以分别判断三组是否出现错误，从而定位该错误发生在哪一位上，下面举个简单的例子。</p>
<ul>
<li>假如说P1组发生了错误，而P2、P3组均为正确，那么可以定位为p1发生了错误。</li>
<li>假如说P1组和P2组同时发生了错误，P3组是正确的，那么可以定位为d1发生了错误。</li>
<li>假如说P1、P2、P3组均发生了错误，那么可以定位为d4发生了错误。</li>
</ul>
<p>所以，我们可以发现，当分组合理时，通过对各组码字进行奇偶校验，就可以准确发现错误及定位错误码字从而实现纠错。</p>
<h2 id="编码规则">编码规则</h2>
<p>由上述例子，我们可以发现，汉明码正是利用了不同分组的奇偶校验性来进行纠错，所以如何进行分组就是汉明码的一个核心问题。我们先引入百度百科上关于汉明码奇偶校验位的位置分配表，现在看不懂没关系，解释完就很清晰了。</p>
<figure data-type="image" tabindex="2"><img src="https://lzyuuu.github.io/post-images/1595510143586.jpg" alt="img" loading="lazy"></figure>
<p>汉明码的编码规则是，一串码字中所有2的i次幂位置均为奇偶校验码，同时该校验码需要使校验码所在组的1的个数为偶数。因此，我们可以简单列一下奇偶校验码的位置：1、2、4、8、16、32等。</p>
<p>由于我们知道，在二进制数中，2的i次幂可以写成0001、0010、0100、1000等形式，因此所有校验位覆盖了数据位置和该校验位位置的二进制与的值不为0的数。</p>
<p>还是不好理解是吗？通俗一点来说就是：</p>
<ul>
<li>凡是位置符合这种形式的，XXX1，归到P1；</li>
<li>凡是位置符合这种形式的，XX1X，归到P2；</li>
<li>凡是位置符合这种形式的，X1XX，归到P3；</li>
<li>凡是位置符合这种形式的，1XXX，归到P4；</li>
</ul>
<p>如此类推。现在再回头看看位置分配表，是不是就很好理解了，我们可以很神奇的发现，每一个奇偶校验位，仅会出现在单个组里，因此每个奇偶校验位仅完成单个组的奇偶校验。</p>
<p>为了增强理解，我们使用一个真实的例子来进行说明。假如目前我们需要传的码字为1011010，那么我们可以把奇偶校验位根据位置进行占位，得到新的码字XX1X011X010，其中X为奇偶校验位。那么根据分组，我们可以分为四组，分别是：</p>
<table>
<thead>
<tr>
<th style="text-align:center">P1</th>
<th style="text-align:center">P2</th>
<th style="text-align:center">P3</th>
<th style="text-align:center">P4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X10100</td>
<td style="text-align:center">X11110</td>
<td style="text-align:center">X011</td>
<td style="text-align:center">X010</td>
</tr>
</tbody>
</table>
<p>那么，为了满足各组的1的数量均为偶数，那么就可以确定奇偶校验位的准确码字了。</p>
<table>
<thead>
<tr>
<th style="text-align:center">P1</th>
<th style="text-align:center">P2</th>
<th style="text-align:center">P3</th>
<th style="text-align:center">P4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">010100</td>
<td style="text-align:center">011110</td>
<td style="text-align:center">0011</td>
<td style="text-align:center">1010</td>
</tr>
</tbody>
</table>
<h2 id="译码和纠错">译码和纠错</h2>
<p>上述过程完成了编码的步骤，那么汉明码是怎么进行译码的呢，译码是编码的逆过程，我们在得到一串汉明码后，可以进行如下操作：</p>
<ol>
<li>可以按照上述理论先对其进行分组。</li>
<li>在得到分组后，分别对每个组进行奇偶校验，正确为0，错误为1。</li>
<li>根据每个组的奇偶校验结果定位错误码元并纠错。</li>
</ol>
<p>假如获得的汉明码，经过分组和奇偶校验得到如下结果：</p>
<table>
<thead>
<tr>
<th>P5</th>
<th>P4</th>
<th>P3</th>
<th>P2</th>
<th>P1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>那么错误的位置就是10101位置，换算为十进制就是21位发生了错误。</p>
]]></content>
    </entry>
</feed>